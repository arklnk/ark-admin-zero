// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	sysProfessionFieldNames          = builder.RawFieldNames(&SysProfession{})
	sysProfessionRows                = strings.Join(sysProfessionFieldNames, ",")
	sysProfessionRowsExpectAutoSet   = strings.Join(stringx.Remove(sysProfessionFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	sysProfessionRowsWithPlaceHolder = strings.Join(stringx.Remove(sysProfessionFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"

	cacheArkAdminSysProfessionIdPrefix   = "cache:arkAdmin:sysProfession:id:"
	cacheArkAdminSysProfessionNamePrefix = "cache:arkAdmin:sysProfession:name:"
)

type (
	sysProfessionModel interface {
		Insert(ctx context.Context, data *SysProfession) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*SysProfession, error)
		FindOneByName(ctx context.Context, name string) (*SysProfession, error)
		Update(ctx context.Context, data *SysProfession) error
		Delete(ctx context.Context, id int64) error
	}

	defaultSysProfessionModel struct {
		sqlc.CachedConn
		table string
	}

	SysProfession struct {
		Id         int64     `db:"id"`          // 编号
		Name       string    `db:"name"`        // 职称
		Status     int64     `db:"status"`      // 0=禁用 1=开启
		OrderNum   int64     `db:"order_num"`   // 排序值
		CreateTime time.Time `db:"create_time"` // 创建时间
		UpdateTime time.Time `db:"update_time"` // 更新时间
	}
)

func newSysProfessionModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultSysProfessionModel {
	return &defaultSysProfessionModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`sys_profession`",
	}
}

func (m *defaultSysProfessionModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	arkAdminSysProfessionIdKey := fmt.Sprintf("%s%v", cacheArkAdminSysProfessionIdPrefix, id)
	arkAdminSysProfessionNameKey := fmt.Sprintf("%s%v", cacheArkAdminSysProfessionNamePrefix, data.Name)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, arkAdminSysProfessionIdKey, arkAdminSysProfessionNameKey)
	return err
}

func (m *defaultSysProfessionModel) FindOne(ctx context.Context, id int64) (*SysProfession, error) {
	arkAdminSysProfessionIdKey := fmt.Sprintf("%s%v", cacheArkAdminSysProfessionIdPrefix, id)
	var resp SysProfession
	err := m.QueryRowCtx(ctx, &resp, arkAdminSysProfessionIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", sysProfessionRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSysProfessionModel) FindOneByName(ctx context.Context, name string) (*SysProfession, error) {
	arkAdminSysProfessionNameKey := fmt.Sprintf("%s%v", cacheArkAdminSysProfessionNamePrefix, name)
	var resp SysProfession
	err := m.QueryRowIndexCtx(ctx, &resp, arkAdminSysProfessionNameKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) (i interface{}, e error) {
		query := fmt.Sprintf("select %s from %s where `name` = ? limit 1", sysProfessionRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, name); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSysProfessionModel) Insert(ctx context.Context, data *SysProfession) (sql.Result, error) {
	arkAdminSysProfessionIdKey := fmt.Sprintf("%s%v", cacheArkAdminSysProfessionIdPrefix, data.Id)
	arkAdminSysProfessionNameKey := fmt.Sprintf("%s%v", cacheArkAdminSysProfessionNamePrefix, data.Name)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, sysProfessionRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Name, data.Status, data.OrderNum)
	}, arkAdminSysProfessionIdKey, arkAdminSysProfessionNameKey)
	return ret, err
}

func (m *defaultSysProfessionModel) Update(ctx context.Context, newData *SysProfession) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	arkAdminSysProfessionIdKey := fmt.Sprintf("%s%v", cacheArkAdminSysProfessionIdPrefix, data.Id)
	arkAdminSysProfessionNameKey := fmt.Sprintf("%s%v", cacheArkAdminSysProfessionNamePrefix, data.Name)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, sysProfessionRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.Name, newData.Status, newData.OrderNum, newData.Id)
	}, arkAdminSysProfessionIdKey, arkAdminSysProfessionNameKey)
	return err
}

func (m *defaultSysProfessionModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheArkAdminSysProfessionIdPrefix, primary)
}

func (m *defaultSysProfessionModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", sysProfessionRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultSysProfessionModel) tableName() string {
	return m.table
}
